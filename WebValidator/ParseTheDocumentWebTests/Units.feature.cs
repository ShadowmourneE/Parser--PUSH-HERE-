// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ParseTheDocumentWebTests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Units")]
    public partial class UnitsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Units.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Units", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unit 1")]
        [NUnit.Framework.CategoryAttribute("[NUnit.Framework.CategoryAttribute(«Parse»)]")]
        [NUnit.Framework.CategoryAttribute("Parse")]
        public void Unit1()
        {
            string[] tagsOfScenario = new string[] {
                    "[NUnit.Framework.CategoryAttribute(«Parse»)]",
                    "Parse"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unit 1", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("I have entered:", @"1 bla bla bla
1.1 Work safely at all times, complying with health and safety legislation, regulations and other relevant guidelines
1.2 Demonstrate the required behaviours in line with the job role and company objectives
1.3 Carry out all of the following during the pipe bending, forming and fitting activities:
1.3.1 adhere to procedures or systems in place for risk assessment, COSHH, personal protective equipment (PPE) and other relevant safety regulations
1.3.2 follow job instructions, assembly drawings and procedures
1.3.3 check that the bending and forming equipment is in a safe and usable condition
1.3.4 return all tools and equipment to the correct location on completion of the pipe fitting activities
1.4 Plan the pipe fitting activities before they start them
1.5 Produce pipework assemblies using two of the following types of pipe: 1.5.1 carbon steel 1.5.2 copper 1.5.3 aluminium 1.5.4 stainless steel 1.5.5 brass 1.5.6 plastic
1.6 Mark out pipework, using the following method: 1.6.1 direct marking using tapes and markers Plus one more from the following 1.6.2 set-outs of pipework using templates 1.6.3 producing set wires 1.6.4 set-outs of pipework onto floor", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 20
 testRunner.When("parse", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 22
 testRunner.Then("all lines should be correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unit 2")]
        public void Unit2()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unit 2", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 24
    testRunner.Given("I have entered:", @"1 Performance and Skills Requirements
1.1 work safely at all times, complying with health and safety legislation, regulations and other relevant guidelines
1.2 demonstrate the required behaviours in line with the job role and company objectives
1.3 wrong Ensure that they apply all of the following checks and practices at all times during the programming activities: 
1.4 Prepare and prove programs for one of the following types of CNC machine tool: a) two axis machine b) multiple axis machines (4 or more) c) three axis machine d) machining centres", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
 testRunner.When("parse", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
 testRunner.Then("the line 4 should have message: Line in the wrong format for children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unit 3")]
        public void Unit3()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unit 3", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 36
    testRunner.Given("I have entered:", @"1.2 Carry out forming operations which produce components having all of the following shapes: 1.15.1 bends/upstands 1.15.2 tray/box sections 1.15.3 folds/safe edges 1.15.4 cylindrical sections Plus one more from the following: 1.15.5 wired edges 1.15.6 cowlings and rounded covers
1.3 Use both of the following types of forming equipment/techniques: 1.14.1 bending machine (hand or powered) 1.14.2 rolling machine (hand or powered) Plus two more from the following: 1.14.3 hammers/panel beating equipment 1.14.4 wheeling machine 1.14.5 stakes and formers 1.14.6 swaging machine 1.14.7 presses 1.14.8 shrinking techniques 1.14.9 jenny/wiring machine 1.14.10 stretching techniques", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 41
 testRunner.When("parse", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
 testRunner.Then("all lines should be correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unit 4")]
        public void Unit4()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unit 4", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 45
    testRunner.Given("I have entered:", "1 Performance and Skills Requirements\r\n1.1 work safely at all times, complying wi" +
                        "th health and safety legislation, regulations and other relevant guidelines\r\n1.2" +
                        " demonstrate the required behaviours in line with the job role and company objec" +
                        "tives\r\n1.3 Carry out all of the following during the instrumentation maintenance" +
                        " activities:1.3.1 adhere to procedures or systems in place for risk assessment, " +
                        "COSHH, personal protective equipment (PPE) and other relevant safety regulations" +
                        " 1.3.2 where appropriate, ensure the safe isolation of instruments (such as elec" +
                        "trical, pneumatic, process) 1.3.3 follow job instructions, maintenance drawings " +
                        "and procedures 1.3.4 check that the tools and test instruments are within calibr" +
                        "ation date and are in a safe and usable condition 1.3.5 ensure that the equipmen" +
                        "t/system is kept free from foreign objects, dirt or other contamination 1.3.6 re" +
                        "turn all tools and equipment to the correct location on completion of the mainte" +
                        "nance activities\r\n1.3.1 adhere to procedures or systems in place for risk assess" +
                        "ment, COSHH, personal protective equipment (PPE) and other relevant safety regul" +
                        "ations\r\n1.3.2 where appropriate, ensure the safe isolation of instruments (such " +
                        "as electrical, pneumatic, process)\r\n1.3.3 follow job instructions, maintenance d" +
                        "rawings and procedures\r\n1.3.4 check that the tools and test instruments are with" +
                        "in calibration date and are in a safe and usable condition\r\n1.3.5 ensure that th" +
                        "e equipment/system is kept free from foreign objects, dirt or other contaminatio" +
                        "n\r\n1.3.6 return all tools and equipment to the correct location on completion of" +
                        " the maintenance activities", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 58
 testRunner.When("parse", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 60
 testRunner.Then("the line 4 should have message: Incorrect string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unit 5")]
        public void Unit5()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unit 5", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 62
    testRunner.Given("I have entered:", "1 Performance and Skills Requirements\r\n1.1 both of the following: plus more of th" +
                        "e following asdfasdfasdfasdf", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 67
 testRunner.When("parse", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 69
 testRunner.Then("all lines should be correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
